import schedule
import time
import logging
import dnslib.server
import json
from logging.handlers import RotatingFileHandler

# Set up logging
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

my_handler = RotatingFileHandler('tool_log.txt', mode='a', maxBytes=4*1024*1024,
                                 backupCount=4, encoding="ascii", delay=0)
my_handler.setFormatter(log_formatter)
my_handler.setLevel(logging.DEBUG)
stream_handler = logging.StreamHandler()

log = logging.getLogger('root')
log.addHandler(my_handler)
log.setLevel(logging.DEBUG)

class GroupNameResolver:
    def __init__(self):
        self.prefix_to_group = {
            "GR": "Something",
            "LR": "AnotherGroup",
            "TP": "YetAnotherGroup"
        }
    
    def determine_group_name(self, name):
        for prefix, group_name in self.prefix_to_group.items():
            if name.startswith(prefix):
                return group_name
        return "DefaultGroup"

import logging
import json

class DNSGroup:
    def __init__(self, group_name):
        self.group_name = group_name
        self.dns_records = {}

class NameToIPMapper:
    def __init__(self):
        self.groups = {}
        self.last_found_ip = None
        self.group_name_resolver = GroupNameResolver()  # Assuming you're importing GroupNameResolver from another module
    
    def add_group(self, group_name):
        if group_name not in self.groups:
            self.groups[group_name] = DNSGroup(group_name)
    
    def add_mapping(self, name, ip):
        group_name = self.group_name_resolver.determine_group_name(name)
        
        if group_name not in self.groups:
            self.add_group(group_name)
        
        group = self.groups[group_name]
        group.dns_records[name] = ip
    
    def get_ip_by_name(self, group_name, name):
        if group_name in self.groups:
            group = self.groups[group_name]
            return group.dns_records.get(name)
        else:
            return None
    
    def search_and_write_to_file(self, name):
        group_name = self.group_name_resolver.determine_group_name(name)
        
        if group_name in self.groups:
            group = self.groups[group_name]
            ip = self.get_ip_by_name(group_name, name)
            if ip:
                self.last_found_ip = ip
                logging.info(f"Found IP address {ip} for {name}")
                with open(f"{group_name}_output_file.txt", "a") as file:
                    file.write(f"{name}: {ip}\n")
            else:
                logging.info(f"No IP address found for {name}")
        else:
            logging.warning(f"Group '{group_name}' not found. Skipping search and write.")

    def store_to_json(self, name, ip, parameters):
        group_name = self.group_name_resolver.determine_group_name(name)
        
        if group_name in self.groups:
            group = self.groups[group_name]
            
            record = {"name": name, "ip": ip, "parameters": parameters}
            
            if name not in group.dns_records:
                group.dns_records[name] = []
            
            group.dns_records[name].append(record)
            
            file_name = f"{group_name}_output_file.json"
            
            if group_name == "YetAnotherGroup":  # XYZ prefix
                template = {
                    "group": group_name,
                    "name": name,
                    "ip": ip,
                    "parameter1": parameters.get("parameter1", ""),
                    "parameter2": parameters.get("parameter2", "")
                }
                
                with open(f"{group_name}_template.json", "w") as template_file:
                    json.dump(template, template_file, indent=4)
                
                file_name = f"{group_name}_output_file_{name}.json"
            
            with open(file_name, "w") as file:
                json.dump(group.dns_records, file, indent=4)


import schedule
import time
import logging
import dnslib.server
from logging.handlers import RotatingFileHandler
from mylogger import setup_logging
from nametoipmapper import NameToIPMapper
from groupnameresolver import GroupNameResolver

# Set up logging
setup_logging()

def main():
    name_mapper = NameToIPMapper()
    
    # Add mappings
    name_mapper.add_mapping("example1", "192.168.1.1")
    name_mapper.add_mapping("example2", "192.168.1.2")
    name_mapper.add_mapping("example3", "192.168.1.3")
    
    # Specify the location where you want to search the IP (e.g., "XYZ" for YetAnotherGroup)
    search_location = "XYZ"
    
    # Specify the name for which you want to search the IP
    name_to_search = "example1"
    
    parameters = {
        "parameter1": "value1",
        "parameter2": "value2"
    }
    
    schedule.every(1).hour.do(name_mapper.store_to_json, name_to_search, "192.168.1.1", parameters)
    
    dns_resolver = dnslib.server.DNSServer(
        resolver=dnslib.server.BaseResolver(address_map={}),
        address="0.0.0.0",
        port=53
    )
    
    dns_resolver.start_thread()

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    logging.info("Program started")
    main()
